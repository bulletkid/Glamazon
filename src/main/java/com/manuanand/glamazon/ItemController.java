package com.manuanand.glamazon;

import java.util.Date;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/item") // This means URL's start with /glamazon (after Application path)
public class ItemController {
	@Autowired // This means to get the bean called itemRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private ItemRepository itemRepository;
	
	///
	// Item Repository
	///
	@PostMapping(path="/addItem") // Map ONLY POST Requests
	public @ResponseBody String addItem (@RequestParam String name, 
			@RequestParam String description, @RequestParam String isbn,
			@RequestParam(required = false) int quantity,
			@RequestParam(required = false) double price) {

		Item newItem = new Item();
		newItem = populateItem(newItem, name, description, isbn, quantity, price);
		itemRepository.save(newItem);
		
		return "Saved";
	}

	@PostMapping(path="/updateItem") // Map ONLY POST Requests
	public @ResponseBody String addItem (@RequestParam Integer itemId,
			@RequestParam (required = false) String name, 
			@RequestParam (required = false) String description, @RequestParam(required = false) String isbn,
			@RequestParam(required = false) Date birthDate,
			@RequestParam(required = false) int quantity,
			@RequestParam(required = false) double price) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		if (itemId != null) {
			Optional<Item> item = itemRepository.findById(itemId);
			if (item.isEmpty()) {
				return "No item with ID #" +itemId;
			} else {
				Item newItem = item.get();
				
				// Copy required fields from old object if they aren't specified in update case
				if ((name == null) && (newItem.getName() != null)) {
					name = newItem.getName();
				}
				
				if ((description == null) && (newItem.getDescription() != null)) {
					description = newItem.getDescription();
				}
				
				if ((isbn == null) && (newItem.getIsbn() != null)) {
					isbn = newItem.getIsbn();
				}
				// End copy from original object
				
				newItem = 
						populateItem(newItem, name, description, isbn, quantity, price);
				itemRepository.save(newItem);
				
				return "Saved";
			}
		}

		return "No item with ID #" +itemId;
	}

	@GetMapping(path="/getAllItems")
	public @ResponseBody Iterable<Item> getItems() {
		
		// This returns a JSON or XML with the users
		return itemRepository.findAll();
	}
	
	@GetMapping(path="/getItemById")
	public @ResponseBody Item getItemById(@RequestParam int id) {
		
		Optional<Item> item = itemRepository.findById(id);
		if (!item.isEmpty()) {
			return item.get();
		} 
		
		return null;
	}
	
	
	///
	/// Helper Methods
	///
	private Item populateItem( Item newItem, String name, String description, 
			String isbn, int quantity, double price)
	{
		newItem.setName(name);
		newItem.setDescription(description);
		newItem.setIsbn(isbn);
		newItem.setQuantity(quantity);
		newItem.setPrice(price);
		
		return newItem;
	}
}