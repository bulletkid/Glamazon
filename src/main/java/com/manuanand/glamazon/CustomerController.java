package com.manuanand.glamazon;

import java.util.Date;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/customer") // This means URL's start with /glamazon (after Application path)
public class CustomerController {
	@Autowired // This means to get the bean called customerRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private CustomerRepository customerRepository;
	
	///
	// Customer Repository
	///
	@PostMapping(path="/addCustomer") // Map ONLY POST Requests
	public @ResponseBody String addCustomer (@RequestParam String name, 
			@RequestParam String email, @RequestParam String password,
			@RequestParam(required = false) Date birthDate,
			@RequestParam(required = false) String address,
			@RequestParam(required = false) String phone,
			@RequestParam(required = false) String preferredCateories) {

		Customer newCustomer = new Customer();
		newCustomer = populateCustomer(newCustomer, name, email, password, birthDate, address, phone, preferredCateories);
		customerRepository.save(newCustomer);
		
		return "Saved";
	}

	@PostMapping(path="/updateCustomer") // Map ONLY POST Requests
	public @ResponseBody String addCustomer (@RequestParam Integer customerId,
			@RequestParam(required = false) String name, 
			@RequestParam(required = false) String email, @RequestParam(required = false) String password,
			@RequestParam(required = false) Date birthDate,
			@RequestParam(required = false) String address,
			@RequestParam(required = false) String phone,
			@RequestParam(required = false) String preferredCateories) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		if (customerId != null) {
			Optional<Customer> customer = customerRepository.findById(customerId);
			if (customer.isEmpty()) {
				return "No customer with ID #" +customerId;
			} else {
				Customer newCustomer = customer.get();

				// Copy required fields from newCustomer if they aren't specified in update case
				if ((name == null) && (newCustomer.getName() != null)) {
					name = newCustomer.getName();
				}
				
				if ((email == null) && (newCustomer.getEmail() != null)) {
					email= newCustomer.getEmail();
				}
				
				if ((password == null) && (newCustomer.getPassword() != null)) {
					password = newCustomer.getPassword();
				}
				// End copy from original object
		
				newCustomer = 
						populateCustomer(newCustomer, name, email, password, birthDate, address, phone, preferredCateories);
				customerRepository.save(newCustomer);
				
				return "Saved";
			}
		}

		return "No customer with ID #" +customerId;
	}

	@GetMapping(path="/getAllCustomers")
	public @ResponseBody Iterable<Customer> getCustomers() {
		
		// This returns a JSON or XML with the users
		return customerRepository.findAll();
	}
	
	@GetMapping(path="/getCustomerById")
	public @ResponseBody Customer getCustomerById(@RequestParam int id) {
		
		Optional<Customer> customer = customerRepository.findById(id);
		if (!customer.isEmpty()) {
			return customer.get();
		} 
		
		return null;
	}
	
	///
	/// Helper Methods
	///
	private Customer populateCustomer( Customer newCustomer, String name, String email, String password, 
			Date birthDate, String address, String phone, String preferredCateories)
	{
		newCustomer.setName(name);
		newCustomer.setEmail(email);
		newCustomer.setPassword(password);
		newCustomer.setBirthDate(birthDate);
		newCustomer.setAddress(address);
		newCustomer.setPhone(phone);
		newCustomer.setPreferredCateories(preferredCateories);
		
		return newCustomer;
	}
}